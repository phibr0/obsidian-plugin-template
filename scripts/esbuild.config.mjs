import esbuild from "esbuild";
import process from "process";
import builtins from 'builtin-modules'
import alias from "esbuild-plugin-alias";
import { sassPlugin } from 'esbuild-sass-plugin';
import { createRequire } from 'module';
import { renameSync, copyFileSync, existsSync, mkdirSync } from "fs";
const require = createRequire(import.meta.url);
const p = require("../package.json");

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin (${p.authorUrl + p.name})
*/
`;
const footer = "\n/* by phibr0 */";

const ci = (process.argv[2] === 'ci');
const prod = (process.argv[2] === 'production' || ci);

esbuild.build({
	banner: {
		js: banner,
	},
	footer: {
		js: footer,
	},
	entryPoints: ['src/main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/closebrackets',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/comment',
		'@codemirror/fold',
		'@codemirror/gutter',
		'@codemirror/highlight',
		'@codemirror/history',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/matchbrackets',
		'@codemirror/panel',
		'@codemirror/rangeset',
		'@codemirror/rectangular-selection',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/stream-parser',
		'@codemirror/text',
		'@codemirror/tooltip',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	loader: {
		'.svg': 'text',
	},
	watch: !prod,
	target: 'es2018',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	minify: prod,
	outfile: 'main.js',
	plugins: [
		alias({
			"react": require.resolve("preact/compat"),
			"react-dom/test-utils": require.resolve("preact/test-utils"),
			"react-dom": require.resolve("preact/compat"),
			"react/jsx-runtime": require.resolve("preact/jsx-runtime"),
		}),
		sassPlugin(),
		{
			name: "Rename Stylesheet",
			setup(build) {
				build.onEnd(() => {
					try {
						renameSync("main.css", "styles.css")
					} catch (error) { }
				});
			},
		},
		{
			name: "Move output",
			setup(build) {
				build.onEnd(() => {
					if (!ci) {
						try {
							if (!existsSync(`${p.vault}/.obsidian/plugins/${p.name}/`)) {
								mkdirSync(`${p.vault}/.obsidian/plugins/${p.name}/`);
							}
							copyFileSync("styles.css", `${p.vault}/.obsidian/plugins/${p.name}/styles.css`);
							copyFileSync("main.js", `${p.vault}/.obsidian/plugins/${p.name}/main.js`);
							copyFileSync("manifest.json", `${p.vault}/.obsidian/plugins/${p.name}/manifest.json`);
						} catch (error) { }
					}
				});
			},
		}
	],
}).catch(() => process.exit(1));
